// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// CreateMigrationTable provides a mock function with given fields: schema
func (_m *Database) CreateMigrationTable(schema string) error {
	ret := _m.Called(schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSchema provides a mock function with given fields: schema
func (_m *Database) CreateSchema(schema string) error {
	ret := _m.Called(schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMigrationLog provides a mock function with given fields: schema, batch
func (_m *Database) DeleteMigrationLog(schema string, batch string) error {
	ret := _m.Called(schema, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(schema, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoMigrationTableExists provides a mock function with given fields: schema
func (_m *Database) DoMigrationTableExists(schema string) (bool, error) {
	ret := _m.Called(schema)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoesSchemaExists provides a mock function with given fields: schema
func (_m *Database) DoesSchemaExists(schema string) (bool, error) {
	ret := _m.Called(schema)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteMigration provides a mock function with given fields: schema, command
func (_m *Database) ExecuteMigration(schema string, command string) error {
	ret := _m.Called(schema, command)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(schema, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLatestBatch provides a mock function with given fields: schema
func (_m *Database) GetLatestBatch(schema string) (string, error) {
	ret := _m.Called(schema)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxSequence provides a mock function with given fields: schema
func (_m *Database) GetMaxSequence(schema string) (int, error) {
	ret := _m.Called(schema)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(schema)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSequenceByBatch provides a mock function with given fields: schema, batch
func (_m *Database) GetSequenceByBatch(schema string, batch string) ([]int, error) {
	ret := _m.Called(schema, batch)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string, string) []int); ok {
		r0 = rf(schema, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(schema, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMigrationLog provides a mock function with given fields: schema, version, name, batch
func (_m *Database) InsertMigrationLog(schema string, version int, name string, batch string) error {
	ret := _m.Called(schema, version, name, batch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, string, string) error); ok {
		r0 = rf(schema, version, name, batch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
