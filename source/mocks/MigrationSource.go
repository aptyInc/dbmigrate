// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MigrationSource is an autogenerated mock type for the MigrationSource type
type MigrationSource struct {
	mock.Mock
}

// GetMigrationDownFile provides a mock function with given fields: schema, version
func (_m *MigrationSource) GetMigrationDownFile(schema string, version int) (string, string, error) {
	ret := _m.Called(schema, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(schema, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, int) string); ok {
		r1 = rf(schema, version)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(schema, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMigrationUpFile provides a mock function with given fields: schema, version
func (_m *MigrationSource) GetMigrationUpFile(schema string, version int) (string, string, error) {
	ret := _m.Called(schema, version)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(schema, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, int) string); ok {
		r1 = rf(schema, version)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int) error); ok {
		r2 = rf(schema, version)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSchemaList provides a mock function with given fields:
func (_m *MigrationSource) GetSchemaList() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedVersions provides a mock function with given fields: schema
func (_m *MigrationSource) GetSortedVersions(schema string) ([]int, error) {
	ret := _m.Called(schema)

	var r0 []int
	if rf, ok := ret.Get(0).(func(string) []int); ok {
		r0 = rf(schema)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schema)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
