// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileReader is an autogenerated mock type for the FileReader type
type FileReader struct {
	mock.Mock
}

// ReadDirs provides a mock function with given fields: root
func (_m *FileReader) ReadDirs(root string) ([]string, error) {
	ret := _m.Called(root)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFileAsString provides a mock function with given fields: path
func (_m *FileReader) ReadFileAsString(path string) (string, error) {
	ret := _m.Called(path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadfilesWithExtension provides a mock function with given fields: root, extn
func (_m *FileReader) ReadfilesWithExtension(root string, extn string) ([]string, error) {
	ret := _m.Called(root, extn)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(root, extn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(root, extn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
